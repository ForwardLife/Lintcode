class Solution {
public:
    /**
     * @param n an integer
     * @return a list of pair<sum, probability>
     */
    vector<pair<int, double>> dicesSum(int n) {
        // Write your code here
        //DP 思想：站在当前看过去，当前是如何从过去得来的，也就是transition，一般从过去推当前不直观
        //state: f[i][j] the probability of ith throw and num is j
        //transition: f[i][j] = f[i-1][j-1]/6 + f[i-1][j-2]/6 + f[i-1][j-3]/6+...+f[i-1][j-6]/6 
        //initial: f[1][1] = 1/6, ..., f[1][6] = 1/6
        //result: [n, f[n][n]], [n+1,f[n][n+1]],..., [6n, f[n][6n]]
        vector<pair<int, double>> res; 
        int i, j, k; 
        if(n == 0){
            return res;
        }
        vector<vector<double>> f(n + 1, vector<double>(6 * n + 1));
        for(i = 1; i <= 6; i++){
            f[1][i] = 1.0/6; 
        }
        for(i = 2; i <= n; i++){
            for(j = i; j <= 6 * i; j++){
                for(k = 1; k <= 6; k++){
                    if(j - k >= 1){
                        f[i][j] += (f[i - 1][j - k] / 6);  
                    }
                }
            }
        }
        for(i = n; i <= 6 * n; i++){
            res.push_back(make_pair(i, f[n][i]));
        }
        return res; 
    }
};
